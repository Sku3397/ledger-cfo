#!/usr/bin/env python3
"""
Script to demonstrate creating a test invoice in QuickBooks Online.
This script mocks the actual API calls for demonstration purposes.
"""

import json
import uuid
import datetime

class MockQuickBooksAPI:
    """Mock implementation of QuickBooks API for testing"""
    
    def __init__(self):
        """Initialize the mock QuickBooks API"""
        self.customers = [
            {"Id": "1", "DisplayName": "Test Customer", "CompanyName": "Test Company"}
        ]
        self.invoice_id_counter = 1000
    
    def query_customers(self, name_query=None):
        """Simulate querying customers"""
        if name_query:
            return [c for c in self.customers if name_query.lower() in c["DisplayName"].lower()]
        return self.customers
    
    def create_invoice(self, invoice_data):
        """Simulate creating an invoice"""
        # Validate minimum required fields
        if not invoice_data:
            raise ValueError("Invoice data cannot be empty")
        
        if "CustomerRef" not in invoice_data:
            raise ValueError("CustomerRef is required for invoice creation")
        
        if "Line" not in invoice_data or not invoice_data["Line"]:
            raise ValueError("At least one line item is required for invoice creation")
        
        # Generate a mock response
        invoice_id = str(self.invoice_id_counter)
        self.invoice_id_counter += 1
        
        return {
            "Id": invoice_id,
            "SyncToken": "0",
            "CustomerRef": invoice_data["CustomerRef"],
            "TxnDate": invoice_data.get("TxnDate", datetime.datetime.now().strftime("%Y-%m-%d")),
            "Line": invoice_data["Line"],
            "Balance": sum(item["Amount"] for item in invoice_data["Line"]),
            "CreateTime": datetime.datetime.now().isoformat(),
            "DocNumber": f"INV-{invoice_id}"
        }
    
    def get_invoice_preview_url(self, invoice_id):
        """Get URL for invoice preview"""
        return f"https://app.sandbox.qbo.intuit.com/app/invoice?txnId={invoice_id}"

def create_test_invoice():
    """Create a test invoice using the mock QuickBooks API"""
    try:
        print("Creating test invoice (mock mode)...")
        
        # Initialize the mock QuickBooks API
        qb_api = MockQuickBooksAPI()
        
        # Set up test customer lookup
        customer_name = "Test Customer"
        customers = qb_api.query_customers(customer_name)
        
        # Use the test customer
        customer_id = customers[0]["Id"]
        print(f"Using customer: {customers[0]['DisplayName']} (ID: {customer_id})")
        
        # Create invoice data
        invoice_data = {
            "CustomerRef": {
                "value": customer_id
            },
            "Line": [
                {
                    "Amount": 123.00,
                    "Description": "Test invoice item",
                    "DetailType": "SalesItemLineDetail",
                    "SalesItemLineDetail": {
                        "ItemRef": {
                            "value": "1"
                        }
                    }
                }
            ]
        }
        
        # Create the invoice
        result = qb_api.create_invoice(invoice_data)
        
        # Print the result
        print("\nInvoice created successfully!")
        print(f"Invoice ID: {result['Id']}")
        print(f"Invoice Number: {result['DocNumber']}")
        print(f"Date: {result['TxnDate']}")
        print(f"Amount: ${result['Balance']:.2f}")
        
        # Get and print invoice URL
        url = qb_api.get_invoice_preview_url(result['Id'])
        print(f"\nPreview URL: {url}")
        
        return result['Id']
            
    except Exception as e:
        print(f"Error creating test invoice: {str(e)}")
        return None

if __name__ == "__main__":
    print("=" * 50)
    print("MOCK INVOICE CREATION TEST")
    print("=" * 50)
    
    invoice_id = create_test_invoice()
    
    if invoice_id:
        print("\nSUCCESS: Test invoice created")
        
        # Show what would be sent to QuickBooks in a real scenario
        print("\nIn a real implementation, this invoice would be sent to QuickBooks")
        print("using the QuickBooks API. The invoice ID would be generated by")
        print("QuickBooks and would be used to track the invoice in the system.")
    else:
        print("\nFAILED: Could not create test invoice") 